{"version":3,"file":"jss-plugin-rule-value-function.js","sources":["../src/index.js"],"sourcesContent":["/* @flow */\nimport {\n  createRule,\n  type Rule,\n  type JssStyle,\n  type RuleOptions,\n  type UpdateOptions,\n  type StyleRule,\n  type StyleSheet\n} from 'jss'\n\n// A symbol replacement.\nlet now = Date.now()\nconst fnValuesNs = `fnValues${now}`\nconst fnRuleNs = `fnStyle${++now}`\n\ntype StyleRuleWithRuleFunction = StyleRule & {[key: string]: Function}\n\nexport default function functionPlugin() {\n  return {\n    onCreateRule(name?: string, decl: JssStyle, options: RuleOptions): Rule | null {\n      if (typeof decl !== 'function') return null\n      const rule: StyleRuleWithRuleFunction = (createRule(name, {}, options): any)\n      rule[fnRuleNs] = decl\n      return rule\n    },\n\n    onProcessStyle(style: JssStyle, rule: Rule): JssStyle {\n      // We need to extract function values from the declaration, so that we can keep core unaware of them.\n      // We need to do that only once.\n      // We don't need to extract functions on each style update, since this can happen only once.\n      // We don't support function values inside of function rules.\n      if (fnValuesNs in rule || fnRuleNs in rule) return style\n\n      const fnValues = {}\n      for (const prop in style) {\n        const value = style[prop]\n        if (typeof value !== 'function') continue\n        delete style[prop]\n        fnValues[prop] = value\n      }\n      // $FlowFixMe\n      rule[fnValuesNs] = fnValues\n      return style\n    },\n\n    onUpdate(data: Object, rule: Rule, sheet: StyleSheet, options: UpdateOptions) {\n      const styleRule: StyleRule = (rule: any)\n\n      const fnRule = styleRule[fnRuleNs]\n\n      // If we have a style function, the entire rule is dynamic and style object\n      // will be returned from that function.\n      if (fnRule) {\n        // Empty object will remove all currently defined props\n        // in case function rule returns a falsy value.\n        styleRule.style = fnRule(data) || {}\n      }\n\n      const fnValues = styleRule[fnValuesNs]\n\n      // If we have a fn values map, it is a rule with function values.\n      if (fnValues) {\n        for (const prop in fnValues) {\n          styleRule.prop(prop, fnValues[prop](data), options)\n        }\n      }\n    }\n  }\n}\n"],"names":["now","Date","fnValuesNs","fnRuleNs","functionPlugin","onCreateRule","name","decl","options","rule","createRule","onProcessStyle","style","fnValues","prop","value","onUpdate","data","sheet","styleRule","fnRule"],"mappings":";;;;;;EAYA,IAAIA,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAV;EACA,IAAME,UAAU,gBAAcF,GAA9B;EACA,IAAMG,QAAQ,eAAa,EAAEH,GAA7B;AAIA,EAAe,SAASI,cAAT,GAA0B;EACvC,SAAO;EACLC,IAAAA,YADK,wBACQC,IADR,EACuBC,IADvB,EACuCC,OADvC,EAC0E;EAC7E,UAAI,OAAOD,IAAP,KAAgB,UAApB,EAAgC,OAAO,IAAP;EAChC,UAAME,IAA+B,GAAIC,cAAU,CAACJ,IAAD,EAAO,EAAP,EAAWE,OAAX,CAAnD;EACAC,MAAAA,IAAI,CAACN,QAAD,CAAJ,GAAiBI,IAAjB;EACA,aAAOE,IAAP;EACD,KANI;EAQLE,IAAAA,cARK,0BAQUC,KARV,EAQ2BH,IAR3B,EAQiD;EACpD;EACA;EACA;EACA;EACA,UAAIP,UAAU,IAAIO,IAAd,IAAsBN,QAAQ,IAAIM,IAAtC,EAA4C,OAAOG,KAAP;EAE5C,UAAMC,QAAQ,GAAG,EAAjB;;EACA,WAAK,IAAMC,IAAX,IAAmBF,KAAnB,EAA0B;EACxB,YAAMG,KAAK,GAAGH,KAAK,CAACE,IAAD,CAAnB;EACA,YAAI,OAAOC,KAAP,KAAiB,UAArB,EAAiC;EACjC,eAAOH,KAAK,CAACE,IAAD,CAAZ;EACAD,QAAAA,QAAQ,CAACC,IAAD,CAAR,GAAiBC,KAAjB;EACD,OAbmD;;;EAepDN,MAAAA,IAAI,CAACP,UAAD,CAAJ,GAAmBW,QAAnB;EACA,aAAOD,KAAP;EACD,KAzBI;EA2BLI,IAAAA,QA3BK,oBA2BIC,IA3BJ,EA2BkBR,IA3BlB,EA2B8BS,KA3B9B,EA2BiDV,OA3BjD,EA2ByE;EAC5E,UAAMW,SAAoB,GAAIV,IAA9B;EAEA,UAAMW,MAAM,GAAGD,SAAS,CAAChB,QAAD,CAAxB,CAH4E;EAM5E;;EACA,UAAIiB,MAAJ,EAAY;EACV;EACA;EACAD,QAAAA,SAAS,CAACP,KAAV,GAAkBQ,MAAM,CAACH,IAAD,CAAN,IAAgB,EAAlC;EACD;;EAED,UAAMJ,QAAQ,GAAGM,SAAS,CAACjB,UAAD,CAA1B,CAb4E;;EAgB5E,UAAIW,QAAJ,EAAc;EACZ,aAAK,IAAMC,IAAX,IAAmBD,QAAnB,EAA6B;EAC3BM,UAAAA,SAAS,CAACL,IAAV,CAAeA,IAAf,EAAqBD,QAAQ,CAACC,IAAD,CAAR,CAAeG,IAAf,CAArB,EAA2CT,OAA3C;EACD;EACF;EACF;EAhDI,GAAP;EAkDD;;;;;;;;;;;;"}