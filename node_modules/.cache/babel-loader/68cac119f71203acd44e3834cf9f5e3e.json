{"ast":null,"code":"import _slicedToArray from \"/Users/rj/open-its/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rj/open-its/src/ProblemLayout/Problem.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard';\nimport { Events, animateScroll as scroll, scroller } from \"react-scroll\";\nexport default function Problem(props) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        problemIndex = _useState2[0],\n        updateIndex = _useState2[1];\n\n  const problemData = props.problems[problemIndex];\n  var questionStates = {};\n  var numCorrect = 0;\n  var topRef = React.createRef();\n  const questions = problemData.parts.map(function (question, index) {\n    questionStates[index] = false;\n    return React.createElement(ProblemCard, {\n      question: question,\n      index: index,\n      answerMade: answerMade,\n      key: problemIndex.toString() + index.toString(),\n      name: index.toString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n  });\n\n  function answerMade(cardIndex, isCorrect) {\n    if (questionStates[cardIndex] === isCorrect) {\n      return;\n    }\n\n    questionStates[cardIndex] = isCorrect;\n\n    if (isCorrect) {\n      numCorrect += 1;\n\n      if (numCorrect === Object.keys(questionStates).length) {\n        scroll.scrollToTop({\n          duration: 500\n        });\n        questionStates = {};\n        numCorrect = 0;\n        setTimeout(function () {\n          updateIndex(problemIndex + 1);\n        }, 500);\n      } else {\n        scroller.scrollTo((cardIndex + 1).toString());\n      }\n    } else {\n      numCorrect -= 1;\n    }\n  }\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    ref: topRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.prompt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, problemData.prompt, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), questions);\n}\nconst useStyles = makeStyles({\n  prompt: {\n    marginLeft: 50,\n    marginRight: 50,\n    marginTop: 20,\n    textAlign: 'center',\n    fontSize: 30,\n    fontFamily: 'Titillium Web, sans-serif'\n  }\n});","map":{"version":3,"sources":["/Users/rj/open-its/src/ProblemLayout/Problem.js"],"names":["React","useState","makeStyles","ProblemCard","Events","animateScroll","scroll","scroller","Problem","props","problemIndex","updateIndex","problemData","problems","questionStates","numCorrect","topRef","createRef","questions","parts","map","question","index","answerMade","toString","cardIndex","isCorrect","Object","keys","length","scrollToTop","duration","setTimeout","scrollTo","classes","useStyles","prompt","marginLeft","marginRight","marginTop","textAlign","fontSize","fontFamily"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,MAAR,EAAgBC,aAAa,IAAIC,MAAjC,EAAyCC,QAAzC,QAAwD,cAAxD;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA,oBACCR,QAAQ,CAAC,CAAD,CADT;AAAA;AAAA,QAC5BS,YAD4B;AAAA,QACdC,WADc;;AAEnC,QAAMC,WAAW,GAAGH,KAAK,CAACI,QAAN,CAAeH,YAAf,CAApB;AACA,MAAII,cAAc,GAAG,EAArB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,MAAM,GAAGhB,KAAK,CAACiB,SAAN,EAAb;AAGA,QAAMC,SAAS,GAAGN,WAAW,CAACO,KAAZ,CAAkBC,GAAlB,CAAsB,UAASC,QAAT,EAAmBC,KAAnB,EAA0B;AAC9DR,IAAAA,cAAc,CAACQ,KAAD,CAAd,GAAwB,KAAxB;AACA,WAAO,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAED,QAAvB;AAAiC,MAAA,KAAK,EAAEC,KAAxC;AAA+C,MAAA,UAAU,EAAIC,UAA7D;AACa,MAAA,GAAG,EAAEb,YAAY,CAACc,QAAb,KAA0BF,KAAK,CAACE,QAAN,EAD5C;AAEa,MAAA,IAAI,EAAEF,KAAK,CAACE,QAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAGH,GALiB,CAAlB;;AAQA,WAASD,UAAT,CAAoBE,SAApB,EAA+BC,SAA/B,EAA0C;AACtC,QAAIZ,cAAc,CAACW,SAAD,CAAd,KAA8BC,SAAlC,EAA6C;AAAE;AAAQ;;AACvDZ,IAAAA,cAAc,CAACW,SAAD,CAAd,GAA4BC,SAA5B;;AAEA,QAAIA,SAAJ,EAAe;AACXX,MAAAA,UAAU,IAAI,CAAd;;AACA,UAAIA,UAAU,KAAKY,MAAM,CAACC,IAAP,CAAYd,cAAZ,EAA4Be,MAA/C,EAAuD;AACnDvB,QAAAA,MAAM,CAACwB,WAAP,CAAmB;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAAnB;AACAjB,QAAAA,cAAc,GAAG,EAAjB;AACAC,QAAAA,UAAU,GAAG,CAAb;AACAiB,QAAAA,UAAU,CAAC,YAAU;AAAErB,UAAAA,WAAW,CAACD,YAAY,GAAG,CAAhB,CAAX;AAAgC,SAA7C,EAA+C,GAA/C,CAAV;AACH,OALD,MAKO;AACHH,QAAAA,QAAQ,CAAC0B,QAAT,CAAkB,CAACR,SAAS,GAAG,CAAb,EAAgBD,QAAhB,EAAlB;AACH;AACJ,KAVD,MAUO;AACHT,MAAAA,UAAU,IAAI,CAAd;AACH;AAGJ;;AAED,QAAMmB,OAAO,GAAGC,SAAS,EAAzB;AAEA,SACI;AAAK,IAAA,GAAG,EAAEnB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEkB,OAAO,CAACE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,WAAW,CAACwB,MADjB,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAMKlB,SANL,CADJ;AAUH;AAED,MAAMiB,SAAS,GAAGjC,UAAU,CAAC;AACzBkC,EAAAA,MAAM,EAAE;AACJC,IAAAA,UAAU,EAAE,EADR;AAEJC,IAAAA,WAAW,EAAE,EAFT;AAGJC,IAAAA,SAAS,EAAE,EAHP;AAIJC,IAAAA,SAAS,EAAE,QAJP;AAKJC,IAAAA,QAAQ,EAAE,EALN;AAMJC,IAAAA,UAAU,EAAE;AANR;AADiB,CAAD,CAA5B","sourcesContent":["import React, { useState }  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard'\nimport {Events, animateScroll as scroll, scroller} from \"react-scroll\";\n\nexport default function Problem(props) {\n    const [problemIndex, updateIndex] = useState(0);\n    const problemData = props.problems[problemIndex];\n    var questionStates = {};\n    var numCorrect = 0;\n    var topRef = React.createRef()\n\n\n    const questions = problemData.parts.map(function(question, index) {\n        questionStates[index] = false;\n        return <ProblemCard question={question} index={index} answerMade = {answerMade}\n                            key={problemIndex.toString() + index.toString()}\n                            name={index.toString}/>\n    }\n    );\n\n    function answerMade(cardIndex, isCorrect) {\n        if (questionStates[cardIndex] === isCorrect) { return }\n        questionStates[cardIndex] = isCorrect;\n\n        if (isCorrect) {\n            numCorrect += 1;\n            if (numCorrect === Object.keys(questionStates).length) {\n                scroll.scrollToTop({duration: 500});\n                questionStates = {};\n                numCorrect = 0;\n                setTimeout(function(){ updateIndex(problemIndex + 1); }, 500)\n            } else {\n                scroller.scrollTo((cardIndex + 1).toString())\n            }\n        } else {\n            numCorrect -= 1\n        }\n\n\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div ref={topRef}>\n            <div className={classes.prompt}>\n                {problemData.prompt}\n                <hr/>\n\n            </div>\n            {questions}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    prompt: {\n        marginLeft: 50,\n        marginRight: 50,\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 30,\n        fontFamily: 'Titillium Web, sans-serif',\n    },\n});"]},"metadata":{},"sourceType":"module"}