{"ast":null,"code":"import _slicedToArray from \"/Users/rj/open-its/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rj/open-its/src/ProblemLayout/Problem.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard';\nimport { animateScroll as scroll, scroller, Element } from \"react-scroll\";\nimport { update, model } from '../BKT/BKTBrains';\nexport default function Problem(props) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        problemIndex = _useState2[0],\n        updateIndex = _useState2[1];\n\n  const problemData = props.problems[problemIndex];\n  const numProblems = props.problems.length;\n  var questionStates = {};\n  var numCorrect = 0;\n  const questions = problemData.parts.map(function (question, index) {\n    questionStates[index] = null;\n    return React.createElement(Element, {\n      name: index.toString(),\n      key: problemIndex.toString() + index.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(ProblemCard, {\n      question: question,\n      index: index,\n      answerMade: answerMade,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }));\n  });\n\n  function answerMade(cardIndex, isCorrect) {\n    if (questionStates[cardIndex] === isCorrect) {\n      return;\n    }\n\n    questionStates[cardIndex] = isCorrect;\n    update(model, isCorrect);\n    console.log(model.probMastery);\n\n    if (isCorrect) {\n      numCorrect += 1;\n\n      if (numCorrect === Object.keys(questionStates).length) {\n        scroll.scrollToTop({\n          duration: 900\n        });\n        questionStates = {};\n        numCorrect = 0;\n\n        if (problemIndex < numProblems - 1) {\n          setTimeout(function () {\n            updateIndex(problemIndex + 1);\n          }, 900);\n        }\n      } else {\n        scroller.scrollTo((cardIndex + 1).toString(), {\n          duration: 500,\n          smooth: true\n        });\n      }\n    } else {\n      numCorrect -= 1;\n    }\n  }\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.prompt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, problemData.prompt, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), questions);\n}\nconst useStyles = makeStyles({\n  prompt: {\n    marginLeft: 50,\n    marginRight: 50,\n    marginTop: 20,\n    textAlign: 'center',\n    fontSize: 30,\n    fontFamily: 'Titillium Web, sans-serif'\n  }\n});","map":{"version":3,"sources":["/Users/rj/open-its/src/ProblemLayout/Problem.js"],"names":["React","useState","makeStyles","ProblemCard","animateScroll","scroll","scroller","Element","update","model","Problem","props","problemIndex","updateIndex","problemData","problems","numProblems","length","questionStates","numCorrect","questions","parts","map","question","index","toString","answerMade","cardIndex","isCorrect","console","log","probMastery","Object","keys","scrollToTop","duration","setTimeout","scrollTo","smooth","classes","useStyles","prompt","marginLeft","marginRight","marginTop","textAlign","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard'\nimport {animateScroll as scroll, scroller, Element} from \"react-scroll\";\nimport {update, model} from '../BKT/BKTBrains'\n\nexport default function Problem(props) {\n    const [problemIndex, updateIndex] = useState(0);\n    const problemData = props.problems[problemIndex];\n    const numProblems = props.problems.length;\n    var questionStates = {};\n    var numCorrect = 0;\n\n\n    const questions = problemData.parts.map(function(question, index) {\n        questionStates[index] = null;\n        return <Element name={index.toString()} key={problemIndex.toString() + index.toString()}>\n            <ProblemCard question={question} index={index} answerMade = {answerMade}/>\n        </Element>\n    }\n    );\n\n    function answerMade(cardIndex, isCorrect) {\n        if (questionStates[cardIndex] === isCorrect) { return }\n        questionStates[cardIndex] = isCorrect;\n\n        update(model, isCorrect);\n        console.log(model.probMastery);\n\n        if (isCorrect) {\n            numCorrect += 1;\n            if (numCorrect === Object.keys(questionStates).length) {\n                scroll.scrollToTop({duration: 900});\n                questionStates = {};\n                numCorrect = 0;\n                if (problemIndex < numProblems - 1) {\n                    setTimeout(function(){ updateIndex(problemIndex + 1); }, 900)\n                }\n            } else {\n                scroller.scrollTo((cardIndex + 1).toString(), {\n                    duration: 500,\n                    smooth: true\n                })\n            }\n        } else {\n            numCorrect -= 1\n        }\n\n\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <div className={classes.prompt}>\n                {problemData.prompt}\n                <hr/>\n\n            </div>\n            {questions}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    prompt: {\n        marginLeft: 50,\n        marginRight: 50,\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 30,\n        fontFamily: 'Titillium Web, sans-serif',\n    },\n});"]},"metadata":{},"sourceType":"module"}