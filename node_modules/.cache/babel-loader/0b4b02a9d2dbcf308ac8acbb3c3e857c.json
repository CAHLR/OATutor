{"ast":null,"code":"import _slicedToArray from \"/Users/rj/open-its/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rj/open-its/src/ProblemLayout/Problem.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard';\nimport { animateScroll as scroll, scroller, Element } from \"react-scroll\";\nimport { update, knowledgeComponentModels } from '../BKT/BKTBrains';\nimport { nextProblem } from '../ProblemPool/problemIndex';\nexport default function Problem(props) {\n  let problem = nextProblem(knowledgeComponentModels);\n\n  const _useState = useState(props.problem),\n        _useState2 = _slicedToArray(_useState, 2),\n        problemData = _useState2[0],\n        updateProblem = _useState2[1];\n\n  var partStates = {};\n  var numCorrect = 0;\n  const parts = problemData.parts.map(function (part, index) {\n    partStates[index] = null;\n    return React.createElement(Element, {\n      name: index.toString(),\n      key: Date().getTime(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(ProblemCard, {\n      part: part,\n      index: index,\n      answerMade: answerMade,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }));\n  });\n\n  function answerMade(cardIndex, kcArray, isCorrect) {\n    if (partStates[cardIndex] === true) {\n      return;\n    }\n\n    partStates[cardIndex] = isCorrect;\n\n    for (var kc of kcArray) {\n      console.log(kc);\n      update(knowledgeComponentModels[kc], isCorrect);\n      console.log(knowledgeComponentModels[kc].probMastery);\n    }\n\n    if (isCorrect) {\n      numCorrect += 1;\n\n      if (numCorrect === Object.keys(partStates).length) {\n        scroll.scrollToTop({\n          duration: 900\n        });\n        partStates = {};\n        numCorrect = 0;\n        const problem = nextProblem();\n        setTimeout(function () {\n          updateProblem(problem);\n        }, 900);\n      } else {\n        scroller.scrollTo((cardIndex + 1).toString(), {\n          duration: 500,\n          smooth: true\n        });\n      }\n    }\n  }\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.prompt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, problemData.prompt, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), parts);\n}\nconst useStyles = makeStyles({\n  prompt: {\n    marginLeft: 50,\n    marginRight: 50,\n    marginTop: 20,\n    textAlign: 'center',\n    fontSize: 30,\n    fontFamily: 'Titillium Web, sans-serif'\n  }\n});","map":{"version":3,"sources":["/Users/rj/open-its/src/ProblemLayout/Problem.js"],"names":["React","useState","makeStyles","ProblemCard","animateScroll","scroll","scroller","Element","update","knowledgeComponentModels","nextProblem","Problem","props","problem","problemData","updateProblem","partStates","numCorrect","parts","map","part","index","toString","Date","getTime","answerMade","cardIndex","kcArray","isCorrect","kc","console","log","probMastery","Object","keys","length","scrollToTop","duration","setTimeout","scrollTo","smooth","classes","useStyles","prompt","marginLeft","marginRight","marginTop","textAlign","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard'\nimport {animateScroll as scroll, scroller, Element} from \"react-scroll\";\nimport {update, knowledgeComponentModels} from '../BKT/BKTBrains'\nimport { nextProblem } from '../ProblemPool/problemIndex'\n\nexport default function Problem(props) {\n    let problem = nextProblem(knowledgeComponentModels);\n    const [problemData, updateProblem] = useState(props.problem);\n    var partStates = {};\n    var numCorrect = 0;\n\n\n    const parts = problemData.parts.map(function(part, index) {\n        partStates[index] = null;\n        return <Element name={index.toString()} key={Date().getTime()}>\n            <ProblemCard part={part} index={index} answerMade = {answerMade}/>\n        </Element>\n    }\n    );\n\n    function answerMade(cardIndex, kcArray, isCorrect) {\n        if (partStates[cardIndex] === true) { return }\n        partStates[cardIndex] = isCorrect;\n        \n        for (var kc of kcArray) {\n            console.log(kc);\n            update(knowledgeComponentModels[kc], isCorrect);\n            console.log(knowledgeComponentModels[kc].probMastery);\n        }\n        \n\n        if (isCorrect) {\n            numCorrect += 1;\n            if (numCorrect === Object.keys(partStates).length) {\n                scroll.scrollToTop({duration: 900});\n                partStates = {};\n                numCorrect = 0;\n\n                const problem = nextProblem();\n                setTimeout(function(){ updateProblem(problem); }, 900)\n\n            } else {\n                scroller.scrollTo((cardIndex + 1).toString(), {\n                    duration: 500,\n                    smooth: true\n                })\n            }\n        }\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <div className={classes.prompt}>\n                {problemData.prompt}\n                <hr/>\n\n            </div>\n            {parts}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    prompt: {\n        marginLeft: 50,\n        marginRight: 50,\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 30,\n        fontFamily: 'Titillium Web, sans-serif',\n    },\n});"]},"metadata":{},"sourceType":"module"}