{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      height: 56,\n      backgroundColor: theme.palette.background.paper\n    }\n  };\n};\nvar BottomNavigation = React.forwardRef(function BottomNavigation(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      onChange = props.onChange,\n      _props$showLabels = props.showLabels,\n      showLabels = _props$showLabels === void 0 ? false : _props$showLabels,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"onChange\", \"showLabels\", \"value\"]);\n\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), React.Children.map(children, function (child, childIndex) {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (child.type === React.Fragment) {\n        console.error([\"Material-UI: the BottomNavigation component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    var childValue = child.props.value === undefined ? childIndex : child.props.value;\n    return React.cloneElement(child, {\n      selected: childValue === value,\n      showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,\n      value: childValue,\n      onChange: onChange\n    });\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigation.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {any} value We default to the index of the child\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, all `BottomNavigationAction`s will show their labels.\n   * By default, only the selected `BottomNavigationAction` will show its label.\n   */\n  showLabels: PropTypes.bool,\n\n  /**\n   * The value of the currently selected `BottomNavigationAction`.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigation'\n})(BottomNavigation);","map":null,"metadata":{},"sourceType":"module"}