{"ast":null,"code":"var _jsxFileName = \"/Users/rj/open-its/src/ProblemLayout/Problem.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard';\nexport default function Problem(props) {\n  const problemData = props.problem;\n  var questionStates = {};\n  var numCorrect = 0;\n  const questions = problemData.parts.map(function (question, index) {\n    questionStates[index] = false;\n    return React.createElement(ProblemCard, {\n      question: question,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    });\n  });\n\n  function answerMade(cardIndex, isCorrect) {\n    if (questionStates[cardIndex] === isCorrect) {\n      return;\n    }\n\n    questionStates[cardIndex] = isCorrect;\n\n    if (isCorrect) {\n      numCorrect += 1;\n    } else {\n      numCorrect -= 1;\n    }\n\n    if (numCorrect === Object.keys(questionStates).length) {\n      problemIndex += 1;\n    }\n  }\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.prompt,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, problemData.prompt, React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), questions);\n}\nconst useStyles = makeStyles({\n  prompt: {\n    marginLeft: 50,\n    marginRight: 50,\n    marginTop: 20,\n    textAlign: 'center',\n    fontSize: 30,\n    fontFamily: 'Titillium Web, sans-serif'\n  }\n});","map":{"version":3,"sources":["/Users/rj/open-its/src/ProblemLayout/Problem.js"],"names":["React","makeStyles","ProblemCard","Problem","props","problemData","problem","questionStates","numCorrect","questions","parts","map","question","index","answerMade","cardIndex","isCorrect","Object","keys","length","problemIndex","classes","useStyles","prompt","marginLeft","marginRight","marginTop","textAlign","fontSize","fontFamily"],"mappings":";AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAEnC,QAAMC,WAAW,GAAGD,KAAK,CAACE,OAA1B;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,QAAMC,SAAS,GAAGJ,WAAW,CAACK,KAAZ,CAAkBC,GAAlB,CAAsB,UAASC,QAAT,EAAmBC,KAAnB,EAA0B;AAC9DN,IAAAA,cAAc,CAACM,KAAD,CAAd,GAAwB,KAAxB;AACA,WAAO,oBAAC,WAAD;AAAa,MAAA,QAAQ,EAAED,QAAvB;AAAiC,MAAA,KAAK,EAAEC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAHiB,CAAlB;;AAOA,WAASC,UAAT,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0C;AACtC,QAAIT,cAAc,CAACQ,SAAD,CAAd,KAA8BC,SAAlC,EAA6C;AAAE;AAAQ;;AACvDT,IAAAA,cAAc,CAACQ,SAAD,CAAd,GAA4BC,SAA5B;;AAEA,QAAIA,SAAJ,EAAe;AACXR,MAAAA,UAAU,IAAI,CAAd;AACH,KAFD,MAEO;AACHA,MAAAA,UAAU,IAAI,CAAd;AACH;;AAED,QAAIA,UAAU,KAAKS,MAAM,CAACC,IAAP,CAAYX,cAAZ,EAA4BY,MAA/C,EAAuD;AACnDC,MAAAA,YAAY,IAAI,CAAhB;AACH;AAGJ;;AAED,QAAMC,OAAO,GAAGC,SAAS,EAAzB;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKlB,WAAW,CAACkB,MADjB,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAMKd,SANL,CADJ;AAUH;AAED,MAAMa,SAAS,GAAGrB,UAAU,CAAC;AACzBsB,EAAAA,MAAM,EAAE;AACJC,IAAAA,UAAU,EAAE,EADR;AAEJC,IAAAA,WAAW,EAAE,EAFT;AAGJC,IAAAA,SAAS,EAAE,EAHP;AAIJC,IAAAA,SAAS,EAAE,QAJP;AAKJC,IAAAA,QAAQ,EAAE,EALN;AAMJC,IAAAA,UAAU,EAAE;AANR;AADiB,CAAD,CAA5B","sourcesContent":["import React  from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ProblemCard from './ProblemCard'\n\nexport default function Problem(props) {\n\n    const problemData = props.problem;\n    var questionStates = {};\n    var numCorrect = 0;\n    const questions = problemData.parts.map(function(question, index) {\n        questionStates[index] = false;\n        return <ProblemCard question={question} index={index}/>\n    }\n    );\n\n\n    function answerMade(cardIndex, isCorrect) {\n        if (questionStates[cardIndex] === isCorrect) { return }\n        questionStates[cardIndex] = isCorrect;\n\n        if (isCorrect) {\n            numCorrect += 1\n        } else {\n            numCorrect -= 1\n        }\n\n        if (numCorrect === Object.keys(questionStates).length) {\n            problemIndex += 1;\n        }\n\n        \n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <div className={classes.prompt}>\n                {problemData.prompt}\n                <hr/>\n\n            </div>\n            {questions}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    prompt: {\n        marginLeft: 50,\n        marginRight: 50,\n        marginTop: 20,\n        textAlign: 'center',\n        fontSize: 30,\n        fontFamily: 'Titillium Web, sans-serif',\n    },\n});"]},"metadata":{},"sourceType":"module"}